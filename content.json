{"meta":{"title":"Al0nez's Bolg","subtitle":"我与春风皆过客,你携秋水揽星河","description":null,"author":"Al0nez","url":"https://Al0nez.github.io","root":"/"},"pages":[{"title":"分类&标签","date":"2021-09-10T02:30:39.000Z","updated":"2021-09-10T02:33:48.948Z","comments":true,"path":"tags/index.html","permalink":"https://al0nez.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"漏洞--RCE代码及命令执行漏洞全解","slug":"30WEB漏洞--代码及命令执行","date":"2021-09-12T08:49:37.000Z","updated":"2021-09-12T09:05:09.829Z","comments":true,"path":"2021/09/12/30WEB漏洞--代码及命令执行/","link":"","permalink":"https://al0nez.github.io/2021/09/12/30WEB%E6%BC%8F%E6%B4%9E--%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","excerpt":"前言在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用 代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代 码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏 洞。同样调用系统命令处理，将造成命令执行漏洞。","text":"前言在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用 代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代 码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏 洞。同样调用系统命令处理，将造成命令执行漏洞。 代码执行 RCE 漏洞形成 可控变量 漏洞函数 原理会将我们输入的数据当做代码来执行，如果我们当前的网站是PHP就当做PHP语言来执行。 检测白盒 代码审计 黑盒 漏扫工具 公开漏洞 手工看参数值及功能点 相关函数1eval() 将输入的字符串当做PHP代码执行 1assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动 1call_user_func() 把第一参数作为回调函数 1call_user_func_array() 调用回到函数,并把第一个数组参数作为回到函数的参数 1array_map() 为数组的每个元素应用回调函数 防御 敏感函数禁用 变量过滤或固定 WAF产品 案例演示这题是一个白盒测试，需要代码审计 该代码是将一个字符串进行解密，然后执行脚本命令 解密后发现是接收一个a参数 直接使用?a=ls执行命令 命令执行系统 linux windows 原理应用在调用这些函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。 形成 可控变量 漏洞函数 命令拼接Linux 12345678910111213A;B A 不论正确与否都会执行 BA&amp;B A 后台运行，A 和 B 同时执行A&amp;&amp;B A 执行成功时候才会执行 B 命令A|B A 执行的输出结果，作为 B 命令的参数，A 不论正确与否都会执行 B 命令A||B A 执行失败后才会执行 B 命令`` 反单引号linux下会当做命令来执行127.0.0.1 ; cat /etc/passwd 127.0.0.1 &amp; cat /etc/passwd 127.0.0.1 &amp;&amp; cat /etc/passwd 127.0.0.1 | cat /etc/passwd 233 || cat /etc/passwd windows 1234&quot;|&quot;: 直接执行后面的语句。&quot;||&quot;: 如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。&quot;&amp;&quot;： 两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。&quot;&amp;&amp;&quot;： 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执 行,前面的语句只能为真。 php相关函数 system(args) 有回显 passthru(args)(有回显) exec(args) （回显最后一行-必须echo输出） shell_exec(args) （无回显-必须输出） 反引号：`` popen(handle,mode)(无回显) proc_open(‘cmd’,‘flag’,‘flag’)（无回显） $process = proc_open(‘dir’,$des,$pipes); echo stream_get_contents($pipes[1]); 案例演示墨者命令注入执行分析 通过抓包绕过前端js检测。使用;进行命令拼接 1iipp=127.0.0.1;ls&amp;submit=Ping 1iipp=127.0.0.1;cat&lt;key_21071211676104.php&amp;submit=Ping 成功获取flag 1mozhe1af4b8cc599a0a837919be1d30d 涉及资源：123456789101112https://www.cnblogs.com/ermei/p/6689005.htmlhttp://blog.leanote.com/post/snowming/9da184ef24bdhttps://www.mozhe.cn/bug/detail/T0YyUmZRa1paTkJNQ0JmVWt3Sm13dz09bW96aGUmozhehttps://www.mozhe.cn/bug/detail/RWpnQUllbmNaQUVndTFDWGxaL0JjUT09bW96aGUmozhehttps://www.mozhe.cn/bug/detail/d01lL2RSbGEwZUNTeThVZ0xDdXl0Zz09bW96aGUmozhe","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"代码执行","slug":"代码执行","permalink":"https://al0nez.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"},{"name":"命令执行","slug":"命令执行","permalink":"https://al0nez.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"}]}],"categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://al0nez.github.io/tags/Web/"},{"name":"小迪学习笔记","slug":"小迪学习笔记","permalink":"https://al0nez.github.io/tags/%E5%B0%8F%E8%BF%AA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"代码执行","slug":"代码执行","permalink":"https://al0nez.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"},{"name":"命令执行","slug":"命令执行","permalink":"https://al0nez.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"}]}